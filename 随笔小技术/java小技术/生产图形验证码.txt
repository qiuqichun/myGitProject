

public class SendMsgAction {

	/* 初始化验证码的相关参数 */
	private static final Integer WIDTH=90; // 图片的高度
	private static final Integer HEIGHT=35; // 图片的高度
	private static final Integer XCODE=15;  // 图片的x轴位置
	private static final Integer YCODE=25;  // 图片的y轴位置
	private static final Integer COUNTCODE=4; // 验证码的个数
	private static final Integer COUNTLine=5; // 干扰线条的条数
	private static final Integer FONTSIZE=18; // 字体的大小
	private static final char[] codeSequence = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
	
	
	
	/* 生产图形验证码 */
	@RequestMapping(value="/checkCode",method={RequestMethod.GET,RequestMethod.POST})
	public void chechCode(HttpServletRequest request,HttpServletResponse response) throws IOException{
		// 定义图像buffer
		BufferedImage buffImg = new BufferedImage(WIDTH, HEIGHT,BufferedImage.TYPE_INT_RGB);

		Graphics gd = buffImg.getGraphics();
		// 创建一个随机数生成器类
		Random random = new Random();
		// 将图像填充为白色
		gd.setColor(Color.WHITE);
		gd.fillRect(0, 0, WIDTH, HEIGHT);

		// 创建字体，字体的大小应该根据图片的高度来定。
		Font font = new Font("Fixedsys", Font.BOLD, FONTSIZE);
		// 设置字体。
		gd.setFont(font);

		// 随机产生3条干扰线，使图象中的认证码不易被其它程序探测到。
		gd.setColor(Color.BLACK);
		for (int i = 0; i < COUNTLine; i++) {
			int x = random.nextInt(WIDTH);
			int y = random.nextInt(HEIGHT);
			int xl = random.nextInt(20);
			int yl = random.nextInt(20);
			gd.drawLine(x, y, x + xl, y + yl);
		}

		// randomCode用于保存随机产生的验证码，以便用户登录后进行验证。
		StringBuffer randomCode = new StringBuffer();
		int red = 0, green = 0, blue = 0;

		// 随机产生codeCount数字的验证码。
		for (int i = 0; i < COUNTCODE; i++) {
			// 得到随机产生的验证码数字。
			String code = String.valueOf(codeSequence[random.nextInt(3)]);
			// 产生随机的颜色分量来构造颜色值，这样输出的每位数字的颜色值都将不同。
			red = random.nextInt(255);
			green = random.nextInt(255);
			blue = random.nextInt(255);
	
			// 用随机产生的颜色将验证码绘制到图像中。
			gd.setColor(new Color(red, green, blue));
			gd.drawString(code, (i + 1) * XCODE, YCODE);
	
			// 将产生的四个随机数组合在一起。
			randomCode.append(code);
		}
		// 将四位数字的验证码保存到Session中。
		HttpSession session = request.getSession();
		System.out.print(randomCode);
		session.setAttribute("code", randomCode.toString());
		
		// 禁止图像缓存。
		response.setHeader("Pragma", "no-cache");
		response.setHeader("Cache-Control", "no-cache");
		response.setDateHeader("Expires", 0);
		
		response.setContentType("image/jpeg");
		
		// 将图像输出到Servlet输出流中。
		ServletOutputStream sos = response.getOutputStream();
		ImageIO.write(buffImg, "jpeg", sos);
		sos.close();
}
